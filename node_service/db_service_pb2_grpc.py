# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import db_service_pb2 as db__service__pb2


class DBServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllData = channel.unary_unary(
                '/DBService/GetAllData',
                request_serializer=db__service__pb2.DBServiceGetAllReq.SerializeToString,
                response_deserializer=db__service__pb2.DBServiceGetAllRsp.FromString,
                )
        self.GetSingleData = channel.unary_unary(
                '/DBService/GetSingleData',
                request_serializer=db__service__pb2.DBServiceGetSingleReq.SerializeToString,
                response_deserializer=db__service__pb2.DBServiceGetSingleRsp.FromString,
                )
        self.SetData = channel.unary_unary(
                '/DBService/SetData',
                request_serializer=db__service__pb2.DBServiceSetReq.SerializeToString,
                response_deserializer=db__service__pb2.DBServiceSetRsp.FromString,
                )
        self.UpdateData = channel.unary_unary(
                '/DBService/UpdateData',
                request_serializer=db__service__pb2.DBServiceUpdateReq.SerializeToString,
                response_deserializer=db__service__pb2.DBServiceUpdateRsp.FromString,
                )


class DBServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAllData(self, request, context):
        """Method definitions here
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSingleData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DBServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllData,
                    request_deserializer=db__service__pb2.DBServiceGetAllReq.FromString,
                    response_serializer=db__service__pb2.DBServiceGetAllRsp.SerializeToString,
            ),
            'GetSingleData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSingleData,
                    request_deserializer=db__service__pb2.DBServiceGetSingleReq.FromString,
                    response_serializer=db__service__pb2.DBServiceGetSingleRsp.SerializeToString,
            ),
            'SetData': grpc.unary_unary_rpc_method_handler(
                    servicer.SetData,
                    request_deserializer=db__service__pb2.DBServiceSetReq.FromString,
                    response_serializer=db__service__pb2.DBServiceSetRsp.SerializeToString,
            ),
            'UpdateData': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateData,
                    request_deserializer=db__service__pb2.DBServiceUpdateReq.FromString,
                    response_serializer=db__service__pb2.DBServiceUpdateRsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DBService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DBService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAllData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DBService/GetAllData',
            db__service__pb2.DBServiceGetAllReq.SerializeToString,
            db__service__pb2.DBServiceGetAllRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSingleData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DBService/GetSingleData',
            db__service__pb2.DBServiceGetSingleReq.SerializeToString,
            db__service__pb2.DBServiceGetSingleRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DBService/SetData',
            db__service__pb2.DBServiceSetReq.SerializeToString,
            db__service__pb2.DBServiceSetRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DBService/UpdateData',
            db__service__pb2.DBServiceUpdateReq.SerializeToString,
            db__service__pb2.DBServiceUpdateRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
